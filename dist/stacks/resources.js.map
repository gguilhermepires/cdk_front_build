{"version":3,"file":"resources.js","sourceRoot":"","sources":["../../stacks/resources.ts"],"names":[],"mappings":"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","sourcesContent":["import { Stack, StackProps } from \"aws-cdk-lib\";\nimport { Construct } from \"constructs\";\nimport * as cdk from 'aws-cdk-lib';\nimport * as s3 from 'aws-cdk-lib/aws-s3';\nimport * as s3deploy from 'aws-cdk-lib/aws-s3-deployment';\nimport * as cloudfront from 'aws-cdk-lib/aws-cloudfront';\nimport * as origins from 'aws-cdk-lib/aws-cloudfront-origins';\nimport * as iam from 'aws-cdk-lib/aws-iam';\nimport * as path from 'path';\ntype FrontEndBuildResourceStackProps = StackProps;\nexport class FrontEndBuildResourceStack extends Stack {\n  constructor(scope: Construct, id: string, props?: FrontEndBuildResourceStackProps) { // Corrected type here from previous fix\n    super(scope, id, props);\n     // 1. S3 Bucket for the Shell Application (cdk_front_app_shell)\n    // This bucket will store the static assets (HTML, CSS, JS) of your main shell application.\n    const shellAppBucket = new s3.Bucket(this, 'ShellAppBucket', {\n      bucketName: 'cdk-front-app-shell-assets', // Choose a unique bucket name\n      publicReadAccess: false, // Best practice: Block public access\n      blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL,\n      removalPolicy: cdk.RemovalPolicy.DESTROY, // For development, consider RETAIN for production\n      autoDeleteObjects: true, // For development, consider false for production\n    });\n\n    // 2. S3 Bucket for the Login Microfrontend (cdk_front_login)\n    // This bucket will store the static assets of your login microfrontend.\n    const loginMfBucket = new s3.Bucket(this, 'LoginMicrofrontendBucket', {\n      bucketName: 'cdk-front-login-mf-assets', // Choose a unique bucket name\n      publicReadAccess: false,\n      blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL,\n      removalPolicy: cdk.RemovalPolicy.DESTROY,\n      autoDeleteObjects: true,\n    });\n\n    // 3. Origin Access Control (OAC) for CloudFront to securely access S3 buckets\n    // Use CfnOriginAccessControl (L1 construct) as OriginAccessControl (L2) is not available in 2.206.0\n    const oac = new cloudfront.CfnOriginAccessControl(this, 'S3OriginAccessControl', {\n      originAccessControlConfig: {\n        name: 'S3BucketOAC',\n        originAccessControlOriginType: 's3',\n        signingBehavior: 'always',\n        signingProtocol: 'sigv4',\n      },\n    });\n\n    // 4. CloudFront Distribution for the Shell Application and Microfrontends\n    const distribution = new cloudfront.Distribution(this, 'FrontendDistribution', {\n      defaultRootObject: 'index.html',\n      defaultBehavior: {\n        origin: new origins.S3Origin(shellAppBucket, {\n          originAccessControlId: oac.attrId, // Use oac.attrId for L1 CfnOriginAccessControl\n        }),\n        viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,\n        cachePolicy: cloudfront.CachePolicy.CACHING_OPTIMIZED,\n      },\n      additionalBehaviors: {\n        '/login-mf/*': {\n          origin: new origins.S3Origin(loginMfBucket, {\n            originAccessControlId: oac.attrId, // Use oac.attrId for L1 CfnOriginAccessControl\n          }),\n          viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,\n          cachePolicy: cloudfront.CachePolicy.CACHING_OPTIMIZED,\n        },\n      },\n      // Error responses to handle client-side routing (e.g., React Router, Vue Router)\n      // This ensures that direct access to sub-paths (like /login) will still load index.html\n      // allowing your client-side router to handle the route.\n      errorResponses: [\n        {\n          httpStatus: 403, // Forbidden\n          responseHttpStatus: 200, // Respond with OK\n          responsePagePath: '/index.html', // Serve index.html\n          ttl: cdk.Duration.minutes(0), // Do not cache error responses\n        },\n        {\n          httpStatus: 404, // Not Found\n          responseHttpStatus: 200, // Respond with OK\n          responsePagePath: '/index.html', // Serve index.html\n          ttl: cdk.Duration.minutes(0),\n        },\n      ],\n    });\n\n    // 5. Grant CloudFront access to S3 buckets using IAM Policy\n    // This policy explicitly allows the CloudFront distribution to get objects from your S3 buckets.\n    shellAppBucket.addToResourcePolicy(new iam.PolicyStatement({\n      actions: ['s3:GetObject'],\n      resources: [shellAppBucket.arnForObjects('*')],\n      principals: [new iam.ServicePrincipal('cloudfront.amazonaws.com')],\n      conditions: {\n        StringEquals: {\n          'AWS:SourceArn': `arn:aws:cloudfront::${cdk.Aws.ACCOUNT_ID}:distribution/${distribution.distributionId}`,\n        },\n      },\n    }));\n\n    loginMfBucket.addToResourcePolicy(new iam.PolicyStatement({\n      actions: ['s3:GetObject'],\n      resources: [loginMfBucket.arnForObjects('*')],\n      principals: [new iam.ServicePrincipal('cloudfront.amazonaws.com')],\n      conditions: {\n        StringEquals: {\n          'AWS:SourceArn': `arn:aws:cloudfront::${cdk.Aws.ACCOUNT_ID}:distribution/${distribution.distributionId}`,\n        },\n      },\n    }));\n\n    // 6. Deploy Shell Application assets to S3\n    // This will upload the contents of your shell's build directory to its S3 bucket\n    // and invalidate the CloudFront cache for all paths.\n    new s3deploy.BucketDeployment(this, 'DeployShellApp', {\n      sources: [s3deploy.Source.asset(path.join('c:', 'Users', 'GUILHERME', 'Desktop', 'code', 'cdk front', 'cdk_front_app_shell', 'build'))],\n      destinationBucket: shellAppBucket,\n      distribution: distribution,\n      distributionPaths: ['/*'], // Invalidate all paths in CloudFront after deployment\n    });\n\n    // 7. Deploy Login Microfrontend assets to S3\n    // This will upload the contents of your login microfrontend's build directory to its S3 bucket\n    // and invalidate the CloudFront cache for paths related to this microfrontend.\n    new s3deploy.BucketDeployment(this, 'DeployLoginMicrofrontend', {\n      sources: [s3deploy.Source.asset(path.join('c:', 'Users', 'GUILHERME', 'Desktop', 'code', 'cdk front', 'cdk_front_login', 'build'))],\n      destinationBucket: loginMfBucket,\n      distribution: distribution, // Invalidate the main distribution\n      distributionPaths: ['/login-mf/*', '/login-mf/remoteEntry.js'], // Invalidate specific paths for the microfrontend\n    });\n\n    // Output the CloudFront distribution domain name\n    new cdk.CfnOutput(this, 'CloudFrontDomain', {\n      value: distribution.distributionDomainName,\n      description: 'The domain name of the CloudFront distribution',\n    });\n}\n}\n"]}